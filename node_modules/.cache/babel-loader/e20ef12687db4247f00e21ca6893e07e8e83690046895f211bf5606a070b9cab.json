{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nkont001\\\\Desktop\\\\test123\\\\thabani-ai\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// App.tsx\nimport React, { useRef, useCallback, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const webcamRef = useRef(null);\n  const [capturedImage, setCapturedImage] = useState(null);\n  const [extractedText, setExtractedText] = useState(null);\n  const capture = useCallback(() => {\n    var _webcamRef$current;\n    const imageSrc = (_webcamRef$current = webcamRef.current) === null || _webcamRef$current === void 0 ? void 0 : _webcamRef$current.getScreenshot();\n    if (imageSrc) {\n      setCapturedImage(imageSrc);\n      Tesseract.recognize(imageSrc, 'eng').then(({\n        data: {\n          text\n        }\n      }) => {\n        setExtractedText(text);\n      }).catch(error => {\n        console.error('Error during OCR:', error);\n        setExtractedText(null);\n      });\n    }\n  }, [webcamRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Camera Image Text Extraction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      style: {\n        width: '50%',\n        height: '50%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: capture,\n      children: \"Capture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), capturedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: capturedImage,\n      alt: \"captured\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }, this), extractedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Extracted Text: \", extractedText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"WBJgqNxsmhTxsSV3GIDCV5IfXk8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useCallback","useState","Webcam","Tesseract","jsxDEV","_jsxDEV","App","_s","webcamRef","capturedImage","setCapturedImage","extractedText","setExtractedText","capture","_webcamRef$current","imageSrc","current","getScreenshot","recognize","then","data","text","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","audio","ref","screenshotFormat","style","width","height","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/nkont001/Desktop/test123/thabani-ai/src/App.tsx"],"sourcesContent":["// App.tsx\nimport React, { useRef, useCallback, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport Tesseract from 'tesseract.js';\n\nconst App: React.FC = () => {\n  const webcamRef = useRef<Webcam>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [extractedText, setExtractedText] = useState<string | null>(null);\n\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current?.getScreenshot();\n    if (imageSrc) {\n      setCapturedImage(imageSrc);\n      Tesseract.recognize(imageSrc, 'eng')\n        .then(({ data: { text } }) => {\n          setExtractedText(text);\n        })\n        .catch(error => {\n          console.error('Error during OCR:', error);\n          setExtractedText(null);\n        });\n    }\n  }, [webcamRef]);\n\n  return (\n    <div>\n      <h1>Camera Image Text Extraction</h1>\n      <Webcam\n        audio={false}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        style={{ width: '50%', height: '50%' }}\n      />\n      <button onClick={capture}>Capture</button>\n      {capturedImage && <img src={capturedImage} alt=\"captured\" />}\n      {extractedText && <div>Extracted Text: {extractedText}</div>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC5D,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,SAAS,GAAGT,MAAM,CAAS,IAAI,CAAC;EACtC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACvE,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvE,MAAMY,OAAO,GAAGb,WAAW,CAAC,MAAM;IAAA,IAAAc,kBAAA;IAChC,MAAMC,QAAQ,IAAAD,kBAAA,GAAGN,SAAS,CAACQ,OAAO,cAAAF,kBAAA,uBAAjBA,kBAAA,CAAmBG,aAAa,CAAC,CAAC;IACnD,IAAIF,QAAQ,EAAE;MACZL,gBAAgB,CAACK,QAAQ,CAAC;MAC1BZ,SAAS,CAACe,SAAS,CAACH,QAAQ,EAAE,KAAK,CAAC,CACjCI,IAAI,CAAC,CAAC;QAAEC,IAAI,EAAE;UAAEC;QAAK;MAAE,CAAC,KAAK;QAC5BT,gBAAgB,CAACS,IAAI,CAAC;MACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzCX,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAEf,oBACEH,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCxB,OAAA,CAACH,MAAM;MACL4B,KAAK,EAAE,KAAM;MACbC,GAAG,EAAEvB,SAAU;MACfwB,gBAAgB,EAAC,YAAY;MAC7BC,KAAK,EAAE;QAAEC,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAM;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFxB,OAAA;MAAQ+B,OAAO,EAAEvB,OAAQ;MAAAY,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzCpB,aAAa,iBAAIJ,OAAA;MAAKgC,GAAG,EAAE5B,aAAc;MAAC6B,GAAG,EAAC;IAAU;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3DlB,aAAa,iBAAIN,OAAA;MAAAoB,QAAA,GAAK,kBAAgB,EAACd,aAAa;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAACtB,EAAA,CAlCID,GAAa;AAAAiC,EAAA,GAAbjC,GAAa;AAoCnB,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}